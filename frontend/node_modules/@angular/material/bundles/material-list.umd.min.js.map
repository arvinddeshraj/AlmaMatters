{"version":3,"file":"material-list.umd.min.js","sources":["../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/list.ts","../../node_modules/tslib/tslib.es6.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItemIndex(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItemIndex(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (option.selected) {\n          return false;\n        }\n\n        return this.compareWith ? this.compareWith(option.value, value) : option.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n    if (element.nodeName && element.nodeName.toLowerCase() === 'button'\n        && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n"],"names":["encapsulation","ViewEncapsulation","None","providers","MAT_SELECTION_LIST_VALUE_ACCESSOR","changeDetection","ChangeDetectionStrategy","OnPush","MatSelectionList","ctorParameters","type","ElementRef","options","ContentChildren","args","MatListOption","selectionChange","Output","disabled","Input","_MatSelectionListMixinBase","NgModule","imports","MatLineModule","MatRippleModule","MatCommonModule","MatPseudoCheckboxModule","CommonModule","exports","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","declarations","MatListModule","_this","prototype","ngAfterContentInit","setLines","this","_lines","_element","Component","selector","exportAs","host","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","inputs","template","decorators","Optional","_icon","ContentChild","MatSelectionListBase","mixinDisableRipple","MatListOptionBase","_MatListOptionMixinBase","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","MatSelectionListChange","source","option","_changeDetector","selectionList","_super","call","_selected","_disabled","_hasFocus","checkboxPosition","tslib_1.__extends","Object","defineProperty","value","newValue","coerceBooleanProperty","markForCheck","selectedOptions","isSelected","_setSelected","_reportValueChange","ngOnInit","wasSelected","Promise","resolve","then","selected","ngOnDestroy","hadFocus","newActiveItem","_removeOptionFromList","focus","toggle","nativeElement","getLabel","_text","textContent","_isRippleDisabled","disableRipple","_handleClick","_emitChangeEvent","_handleFocus","_setFocusedOption","_handleBlur","_onTouched","_getHostElement","select","deselect","_markForCheck","role","class","(focus)","(blur)","(click)","tabindex","[class.mat-list-item-disabled]","[attr.aria-selected]","[attr.aria-disabled]","Inject","propDecorators","MatLine","ViewChild","get","enumerable","configurable","withWrap","withTypeAhead","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","onChange","subscribe","event","_i","_a","added","length","item","removed","_b","_c","optionIndex","_getOptionIndex","_keyManager","updateActiveItemIndex","Math","min","activeItem","keyCode","manager","previousFocusIndex","activeItemIndex","SPACE","ENTER","_toggleFocusedOption","preventDefault","HOME","END","setFirstItemActive","setLastItemActive","A","ctrlKey","find","selectAll","deselectAll","onKeydown","UP_ARROW","DOWN_ARROW","shiftKey","_onChange","_getSelectedOptionValues","values","forEach","correspondingOption","compareWith","focusedOption","toArray","focusedIndex","hasChanged","[tabIndex]","(keydown)","aria-multiselectable","styles","_MatListMixinBase","_navList","_isNavList","element","nodeName","toLowerCase","hasAttribute","apply","arguments","__extends","d","b","__","constructor","extendStatics","create","setPrototypeOf","__proto__","Array","p","hasOwnProperty","MatListBase","MatListItemBase","_MatListItemMixinBase"],"mappings":"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"}